{
  "openapi": "3.0.0",
  "info": {
    "title": "GetShitDone API",
    "description": "API documentation for the GetShitDone todo list application",
    "version": "1.0.0",
    "contact": {
      "email": "support@getshitdone.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "/api",
      "description": "API Base URL"
    }
  ],
  "tags": [
    {
      "name": "auth",
      "description": "Authentication operations"
    },
    {
      "name": "todo",
      "description": "Todo list operations"
    }
  ],
  "paths": {
    "/auth/login": {
      "post": {
        "tags": ["auth"],
        "summary": "Login to the application",
        "description": "Authenticates a user and returns a JWT token as a cookie",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "User authenticated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found or invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": ["auth"],
        "summary": "Register a new user",
        "description": "Creates a new user account and returns a JWT token as a cookie",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Please check your signup"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "get": {
        "tags": ["auth"],
        "summary": "Logout from the application",
        "description": "Clears the JWT token cookie",
        "responses": {
          "200": {
            "description": "Logged out successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Logged out"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/user/{id}": {
      "get": {
        "tags": ["auth"],
        "summary": "Get user by ID",
        "description": "Returns user information for the specified ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/user": {
      "get": {
        "tags": ["auth"],
        "summary": "Get current user",
        "description": "Returns information about the currently authenticated user",
        "security": [
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "No user in request - check JWT token"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/todo/{id}": {
      "get": {
        "tags": ["todo"],
        "summary": "Get all todos for a user",
        "description": "Returns all todo items for the specified user ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Todos retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Todo"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["todo"],
        "summary": "Create a new todo",
        "description": "Creates a new todo item for the specified user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TodoRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Todo created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TodoCreatedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["todo"],
        "summary": "Update a todo",
        "description": "Updates an existing todo item by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Todo ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TodoUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Todo updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TodoUpdatedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["todo"],
        "summary": "Delete a todo",
        "description": "Deletes a todo item by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Todo ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Todo deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TodoDeletedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "securePassword123"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "msg": {
            "type": "string",
            "example": "User found!"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "RegisterRequest": {
        "type": "object",
        "required": ["displayname", "email", "password", "repeatPassword"],
        "properties": {
          "displayname": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "securePassword123"
          },
          "repeatPassword": {
            "type": "string",
            "format": "password",
            "example": "securePassword123"
          }
        }
      },
      "RegisterResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Registered successfully"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "displayname": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "role": {
            "type": "string",
            "example": "user"
          }
        }
      },
      "TodoRequest": {
        "type": "object",
        "required": ["title", "description"],
        "properties": {
          "title": {
            "type": "string",
            "example": "Complete project"
          },
          "description": {
            "type": "string",
            "example": "Finish the React application by Friday"
          }
        }
      },
      "TodoUpdateRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "Complete project"
          },
          "description": {
            "type": "string",
            "example": "Finish the React application by Friday"
          },
          "completed": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "Todo": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "title": {
            "type": "string",
            "example": "Complete project"
          },
          "description": {
            "type": "string",
            "example": "Finish the React application by Friday"
          },
          "completed": {
            "type": "boolean",
            "example": false
          },
          "user": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          }
        }
      },
      "TodoCreatedResponse": {
        "type": "object",
        "properties": {
          "msg": {
            "type": "string",
            "example": "Todo created successfully"
          },
          "todo": {
            "$ref": "#/components/schemas/Todo"
          }
        }
      },
      "TodoUpdatedResponse": {
        "type": "object",
        "properties": {
          "msg": {
            "type": "string",
            "example": "Todo updated successfully"
          },
          "todo": {
            "$ref": "#/components/schemas/Todo"
          }
        }
      },
      "TodoDeletedResponse": {
        "type": "object",
        "properties": {
          "msg": {
            "type": "string",
            "example": "Todo deleted successfully"
          },
          "todo": {
            "$ref": "#/components/schemas/Todo"
          }
        }
      }
    },
    "securitySchemes": {
      "jwtAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "jwt"
      }
    }
  }
}